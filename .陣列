/*陣列為一群相同型態的資料集合 很多資料運算的場合都需要用到陣列
程式透過陣列名稱以及索引值 存取特定方格內所儲存的資料
儲存於方格內的資料稱為"陣列的元素"
陣列的使用及特性:
1.宣告 2.陣列長度
陣列在使用前必須進行宣告 
語法:xtype x[number];
xtype代表所要宣告的陣列型態名稱 ex:int char double
後方的中括弧裡面的數字是一個整數值 ex:10→表示這個陣列可以儲存10個xtype型態的資料 也就是陣列的長度
**陣列的索引值從"0"開始 →最後一個位置殂純資料的索引值為宣告陣列指定的數值-1
ex: int x[6] 宣告一個int型態的陣列 定義其大小為六 可以儲存6個int型態的值到陣列x

3.索引 4.儲存元素
完成陣列宣告後 就可將資料儲存至陣列 或從陣列中取出資料
而資料存取的操作須透過索引
ex: x[3]=150; 將一個int型態的數值150儲存到x陣列的第"4"個位置
    i=x[3];從陣列的第4個位置取出儲存的int型態整數值 將這個值設定給int型態變數i
陣列也可透過變數索引
陣列元素的設值不一定要指定常值 可將一個變數指定給他
或直接透過scanf()將使用者輸入的值指派給陣列的特定索引位置

複雜的陣列可以有多重維度
一維陣列 如同數個方格所組成的盒子
每一個方格代表一個儲存位置 其中只能儲存一筆資料或資料變數
每一個儲存資料的方格可透過對應的索引值辨識→中括弧內的數字

陣列長度
陣列和一般基礎型態如int double不同 可以儲存數量不等的元素
每一格陣列都有一定的容量 就是他的長度
應用程式的邏輯通常會相當複雜 在很多情形下必須確認陣列長度 以避免可能產生的錯誤
取得陣列長度:
透過sizeof()函數回傳陣列所能儲存的位元組數目 再根據位元組數目 即可取得陣列所能儲存的型態資料數量
int size=sizeof(x);
x為一個陣列 將其傳入sizeof() int型態的變數儲存其回傳的整數 代表這個陣列x所能儲存的位元數目
**一個int的大小為4個位元


類型名稱	      位元組	其他名稱	值的範圍
int	               4 	signed	-2,147,483,648 至 2,147,483,647
unsigned int    	 4	unsigned	0 到 4,294,967,295
__int8	           1	char	-128 到 127
unsigned __int8	   1	unsigned char	0 至 255
__int16	           2	short, short int, signed short int	-32,768 至 32,767
unsigned __int16 	 2	unsigned short, unsigned short int	0 到 65,535
__int32	           4	signed, signed int, int	-2,147,483,648 至 2,147,483,647
unsigned __int32	 4	unsigned, unsigned int	0 到 4,294,967,295
__int64	           8	long long, signed long long	-9,223,372,036,854,775,808 至 9,223,372,036,854,775,807
unsigned __int64	 8	unsigned long long	0 到 18,446,744,073,709,551,615
bool               1	無	false 或 true
char	             1	無	-128 到127（預設值）
                     使用編譯時為0到255 /J
signed char	       1	無	-128 到 127
unsigned char	     1	無	0 至 255
short	             2	short int, signed short int	-32,768 至 32,767
unsigned short	   2	unsigned short int	0 到 65,535
long	             4	long int, signed long int	-2,147,483,648 至 2,147,483,647
unsigned long	     4	unsigned long int	0 到 4,294,967,295
long long	         8	無 (但相當於 __int64)	-9,223,372,036,854,775,808 至 9,223,372,036,854,775,807
unsigned long long 8	無 (但相當於 unsigned __int64)	0 到 18,446,744,073,709,551,615
enum	     視情況而異	無	
float	             4	無	3.4E +/- 38 (7 位數)
double	           8	無	1.7E +/- 308 (15 位數)
long double	  與相同 double	無	  與相同 double
wchar_t         	2	__wchar_t	0 到 65,535
*/
